SORT = We've seen it before... where it would take for ex numbers and convert them to string and when putting them in order would look something like:
>> const price = [9, 100, 400.50, 99.99, 12, 9500, 35.99]
>> price.sort()
>> (7) [100, 12, 35.99, 400.50, 9, 9500, 99.99]
kind of ends up sorting them by the first number and not their numerical value. The way to use it is with a comparing function, such as:
>> const sort1 = price.sort((a,b) => a-b);
>> sort1
>> (7) [9, 12, 35.99, 99.99, 1000, 400.50, 9500]
In a way it takes element a, follows by element b, subtract between them and if the result is positive then sorts b before a, if it's negative then a before b, and if it's zero then leave it as it is.
Above in the original array is a = 9, b = 100, so 9 - 100 is negative, therefore a = 9 comes first than b = 100, after these two 100 and 400.50 which is the same, then 400.50 and 99.99 which is gonna be a positive result, so b comes before a, so 99.99 comes before 400.50 and so on...
>> const ascOrder = price.sort((a, b) => a - b);
>> const descOrder = price.sort((a, b) => b - a);
I've just changed position of b

SORT MUTATES THE ARRAY!!!
If you don't want it to change your array, you can have a duplicate variable and sort it, or you can:

>> const ascOrder = price.slice().sort((a, b) => a - b);
>> const descOrder = price.slice().sort((a, b) => b - a);

This way slice makes a new array already inside the new variable that will be the sorted one, creating a duplicated array that will be used to be sorted and stored in a new variable ascOrder or whatever.
