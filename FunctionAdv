FUNCTION EXPRESSIONS = u can define a function, dot... U can define a variable that has the value of a function:
>> const sqr = function (num) {     //note that the function doesn't have a name. IT'S OPTIONAL
    return num * num;
}
>> sqr (7);
>> 49
BECAUSE in JS a function is a freaking OBJECT. Now giving a non functional example to show how can u treat a function as an object
>> function add(x, y) {
    return x + y;
};
>> const minus = function() {
    return x - y;
};
>> function multiply (x, y) {       // just showing 2 ways to write a function
    return x * y;
};
>> const divide = function(x, y) {
    return x / y;
};
>> const operations = [add, minus, multiply, divide]; //create an array/list with the functions as elements
>> for(let func of operations) {
    let result = func(30, 5)        //30 and 5 as an example of arguments
    console.log(result)
}
>>35
>>25
>>150
>>5         // just did a loop where func is gonna be every element of the array which has functions as elements of it

>> const thing = {
    doSomething: multiply        //getting multiply as an example
}
>> thing.doSomething(2, 3)  //thing has a property in it called do something, and this property has an object inside which is
>> 6                        //our function multiply, and the arguments inside ()
Now you can see the similarity with the built in methods.... You've just built yours

FUNCTION AS ARGUMENTS = accepting functions as arguments in another function
>> function cry() {
    console.log('BUA T_T');
};
>> function rage() {
    console.log('GRRR');
};
>> function repeatNTimes(action, num) {
    for(let i = 0; i < num; i++);
        action();
};
>>repeatNTimes(rage, 5)
>> 'GRRR'
>> 'GRRR'
>> 'GRRR'
>> 'GRRR'
>> 'GRRR'

Returning functions as values
>> function multiplyBy(num) {
    return function() {
        return x * num;
    }
}
>> const triple = multiplyBy (3);
on the console
>>triple(6)
>> 18       //when creating triple, i've set that num = 3, so every number i call on the console inside() triple will be *3, so being x

let's try with double
>>const double = multiply(2);
 on the console
 >> double(5)
 >> 10
 >> triple(5)
 >> 15

At the moment they're not great examples of use... but hopefully i'll catch up later on

>>function makeBetweenFunc(x, y) {
    return function(num) {
        return num >= x && num <= y;
    }
}
>> makeBetweenfunc (0,18)
>> const child = function(num) {
    return num >=  && num <= 18;
}
>> child(7)
>>true
>> child(67)
>> false

CALLBACK = 2 functions, whenever we execute a function within a function inside the function we are calling it back... did u get it? No? me neither, but check this:
>>function callTwice(func) {
    func();
    func()
}
>> function laugh() {
    console.log('HAHAHAHHAH');
}
>>callTwice(laugh); //i'm calling back laugh() which will run within calltwice()
They're extremely common.

SETTIMEOUT = new method, yeyyy....it's like sleep on python, u have to put inside() the function or whatever is gonna be called and the time in milieconds, like:
>> function welcome(){
    alert('WELCOME')
}
>> setTimeOut(welcome, 5000)    //welcome is being called back in a pre existing, built in function and 5000miliseconds = 5 seconds

or simpler:
>>setTimeOut(function() {
    alert('WELCOME')
}, 5000);

HOISTING = var can be hoisted. let cannot
>>console.log('shrimp');
>> var animal = 'shrimp;
on console
>> animal
>> undefined //js hoisted animal but because it was printed before setting a value than it gave as undefined and not error
'let' and 'const' on the other hand would have been an ERROR. a FUNCTION IS HOISTED... as soon as u define a function is like it went all the way to the beginning and is gonna work, doesn't matter where in the script, but if a do a function expression and define it inside a variable.
