A bit of a shapeshifter, ppl complain a lot about it... but besides being unpredictable, u can understand that it works according the scope it's inserted generally.... '-'
so it is an object to start.... "globally scoped" in window. Window holds fucktons of properties and functions...so if i call:
>> var color = 'teal'
I will find color inside window if i call it,
>> window.color
>> teal
if i define a let
>> let num = 1
>> window.num
>> undefined
Cause var is everything, accepted everywhere... lol
So inside a function, normally 'this' refers to the window... 
>> const greet = function() {
    console.log(this);
}
>>greet()
 is gonna give you window
 'THIS' IS A REFERENCE TO AN OBJECT!!
 Now inside a function inside an object:
 >> const person = {
     name : 'Cherilyn',
     last : 'Sarkisian',
     nickName : 'Cher',
     fullName () {
         console.log(this);
     }
 }
 on the console
 >> person.fullName()
 >> {
     first: 'Cherilyn',
     last: 'Sarkisian',
     nickName: 'Cher',          // 'this' is not gonna give me window, is gonna give me the object itself
     fullName: f()
 }
 If i wanted to get for example what the function asks... fullName, i'd have to change the line condole.log
 >> const person = {
     name : 'Cherilyn',
     last : 'Sarkisian',
     nickName : 'Cher',
     fullName () {
         console.log(`${this.first}${this.last}, AKA ${this.nickName}`);
     }
 }
 on the console:
 >> fullName()
 >> Cherilyn Sarkisian, AKA Cher
 If i wanted a bit more in an orderly way:
  >> const person = {
     name : 'Cherilyn',
     last : 'Sarkisian',
     nickName : 'Cher',
     fullName () {
         const{
             first, 
             last, 
             nickName
         } = this;
         console.log(`${first}${last}, AKA ${nickName}`);
     }
 }
 and if i wanted to add more to it, like to use this function inside another one, inside the whole miniverse object person:
   >> const person = {
     name : 'Cherilyn',
     last : 'Sarkisian',
     nickName : 'Cher',
     fullName () {
         const{
             first, 
             last, 
             nickName
         } = this;
         return(`${first}${last}, AKA ${nickName}`);
     },
     printBio() {
         const fullName = this.fullName();            //you have to use 'this' in order to reference the object person
         console.log(`${fullName} is a singer and much more`)
     }
 }
 so far we've learned that 'this' depends on the context of the function it is used in.
 ARROW FUNCTION = in arrow functions 'this' is referencing the global scope, so if i had done one arrow function inside this example up, it would have showed me window. One of the reasons why we don't use arrow functions as methods.
 We can use other things as 'bind' which we will see it further in advanced topics of 'this' but not for now...
